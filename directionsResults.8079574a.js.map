{"version":3,"sources":["src/directionsResults.js"],"names":["MVCObject","DirectionsResults","woosmap","utils","map","selectedRendererOptions","unselectedRenderersOptions","summaryContainer","instructionsContainer","directionsMarkers","directionsRoutesBorders","directionsRoutes","currentBounds","selectedRendererIndex","stepsContainer","document","createElement","selectedTravelMode","iconsDirections","start","url","scaledSize","google","maps","Size","end","summaryRenderer","TemplateRenderer","summaryTemplate","registerLambda","getImageTravelMode","stepsHeaderRenderer","stepsHeaderTemplate","appendChild","imgSrc","travelMode","forEach","marker","index","setMap","border","polylineRemoveListeners","route","position","icon","title","push","Marker","label","className","text","getTextWidth","canvas","context","getContext","font","measureText","width","computedDirections","leg","get","getDirections","routes","legs","removeMarkersDirections","originText","destinationText","labelOrigin","Point","addMarkerDirections","start_location","end_location","classList","remove","cleanRouteSteps","displayAllRoutes","setSelectedRenderer","registerRoutesClick","cleanSummaryContainer","routeInfo","routeSummary","render","insertAdjacentHTML","registerSummaryClick","response","odText","errorSpan","errorText","createTextNode","querySelectorAll","summary","currentRendererIndex","parseInt","dataset","rendererindex","addEventListener","e","displayRouteSteps","add","rendererIndex","renderer","setOptions","polylineOptions","borderPolylineOptions","offsetParent","setDirections","selectSummaryRenderer","fullPath","i","length","steps","j","nextSegment","path","k","polylineAddListener","removeAllRoutes","LatLngBounds","union","bounds","getFullPath","optionsRoute","optionsRouteBorder","Object","assign","polylineRouteSelected","Polyline","polylineRouteBorderSelected","fitBounds","updateDirectionsMarkers","setPanel","header","querySelector","parentNode","removeChild","dataStepsHeader","directionsLink","stepsHeaderSummary","style","display","node"],"mappings":"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","file":"directionsResults.8079574a.js","sourceRoot":"..","sourcesContent":["import {\n    summaryTemplate,\n    stepsHeaderTemplate\n} from './config.js'\n\n\nexport class DirectionsResults extends woosmap.utils.MVCObject {\n    constructor(map, selectedRendererOptions, unselectedRenderersOptions, summaryContainer, instructionsContainer) {\n        super();\n        this.map = map;\n        this.selectedRendererOptions = selectedRendererOptions;\n        this.unselectedRenderersOptions = unselectedRenderersOptions;\n        this.directionsMarkers = [];\n        this.directionsRoutesBorders = [];\n        this.directionsRoutes = [];\n        this.currentBounds = {};\n        this.selectedRendererIndex = 0;\n        this.stepsContainer = document.createElement('div');\n        this.selectedTravelMode = '';\n        this.iconsDirections = {\n            start: {\n                url: 'https://images.woosmap.com/directions/directions_start.png',\n                scaledSize: new google.maps.Size(14, 14)\n            },\n            end: {\n                url: 'https://images.woosmap.com/directions/directions_destination.png',\n                scaledSize: new google.maps.Size(16, 16)\n            }\n        };\n        this.summaryRenderer = new woosmap.TemplateRenderer(summaryTemplate);\n        this.summaryRenderer.registerLambda('image_travelmode', this.getImageTravelMode);\n        this.stepsHeaderRenderer = new woosmap.TemplateRenderer(stepsHeaderTemplate);\n        this.summaryContainer = summaryContainer;\n        this.instructionsContainer = instructionsContainer;\n        this.instructionsContainer.appendChild(this.stepsContainer);\n    }\n\n    getImageTravelMode() {\n        let imgSrc;\n        switch (this.travelMode) {\n            case 'DRIVING':\n                imgSrc = \"//images.woosmap.com/directions/drive_black.png\"\n                break;\n            case 'BICYCLING':\n                imgSrc = \"//images.woosmap.com/directions/bicycle_black.png\"\n                break;\n            case 'TRANSIT':\n                imgSrc = \"//images.woosmap.com/directions/transit_black.png\"\n                break;\n            case 'WALKING':\n                imgSrc = \"//images.woosmap.com/directions/walk_black.png\"\n                break;\n            default:\n                imgSrc = \"//images.woosmap.com/directions/drive_black.png\"\n                break;\n        }\n        return imgSrc;\n    }\n\n    removeMarkersDirections() {\n        this.directionsMarkers.forEach((marker, index) => {\n            marker.setMap(null);\n        });\n        this.directionsMarkers = [];\n    }\n\n    removeAllRoutes() {\n        this.directionsRoutesBorders.forEach((border, index) => {\n            woosmap.maps.utils.polylineRemoveListeners(border, 'click');\n            border.setMap(null);\n        });\n        this.directionsRoutes.forEach((route, index) => {\n            woosmap.maps.utils.polylineRemoveListeners(route, 'click');\n            route.setMap(null);\n        });\n        this.directionsRoutes = [];\n        this.directionsRoutesBorders = [];\n    }\n\n    addMarkerDirections(position, icon, title) {\n        this.directionsMarkers.push(new google.maps.Marker({\n            position: position,\n            map: this.map,\n            icon: icon,\n            title: title,\n            label: new google.maps.Marker({\n                className: \"markerLabel\",\n                text: title\n            })\n        }));\n    }\n\n    updateDirectionsMarkers() {\n        function getTextWidth(text) {\n            const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\n            const context = canvas.getContext(\"2d\");\n            context.font = \"bold 14px sans-serif\";\n            return context.measureText(text).width;\n        }\n\n        const computedDirections = this.get('directionsRenderers')[this.selectedRendererIndex].getDirections();\n        const leg = computedDirections.routes[0].legs[0];\n        this.removeMarkersDirections();\n        const originText = this.get('origindestinationText').originText;\n        const destinationText = this.get('origindestinationText').destinationText;\n        this.iconsDirections.start.labelOrigin = new google.maps.Point(getTextWidth(originText) / 2 + 14, 7);\n        this.iconsDirections.end.labelOrigin = new google.maps.Point(getTextWidth(destinationText) / 2 + 15, 8);\n        this.addMarkerDirections(leg.start_location, this.iconsDirections.start, originText);\n        this.addMarkerDirections(leg.end_location, this.iconsDirections.end, destinationText);\n    }\n\n    directionsRenderers_changed() {\n        this.summaryContainer.classList.remove('loading');\n        this.cleanRouteSteps();\n        this.displayAllRoutes();\n        this.setSelectedRenderer(0);\n        this.registerRoutesClick();\n    }\n\n    directionsSummaries_changed() {\n        this.cleanRouteSteps();\n        this.cleanSummaryContainer();\n        this.get('directionsSummaries').forEach((routeInfo, index) => {\n            if (!routeInfo.travelMode) {\n                routeInfo.travelMode = this.get('selectedTravelMode');\n            }\n            const routeSummary = this.summaryRenderer.render(routeInfo);\n            this.summaryContainer.insertAdjacentHTML('beforeend', routeSummary);\n        }, this);\n        this.registerSummaryClick();\n    }\n\n    displayNoResults(response, odText) {\n        this.cleanSummaryContainer();\n        this.summaryContainer.classList.remove('loading');\n        const errorSpan = document.createElement(\"span\");\n        const errorText = `Sorry, we could not calculate transit directions from ${odText.originText} to ${odText.destinationText}`\n        errorSpan.appendChild(document.createTextNode(errorText));\n        this.summaryContainer.appendChild(errorSpan);\n    }\n\n\n    registerSummaryClick() {\n        document.querySelectorAll(\".section-directions-trip\").forEach(summary => {\n            const currentRendererIndex = parseInt(summary.dataset.rendererindex)\n            summary.addEventListener(\"click\", (e) => {\n                if (currentRendererIndex === this.selectedRendererIndex) {\n                    this.displayRouteSteps(currentRendererIndex);\n                } else {\n                    this.setSelectedRenderer(currentRendererIndex);\n                }\n            }, this);\n        }, this);\n    }\n\n    selectSummaryRenderer() {\n        document.querySelectorAll(\".section-directions-trip\").forEach(summary => {\n            summary.classList.remove(\"selected\");\n            if (parseInt(summary.dataset.rendererindex) === this.selectedRendererIndex) {\n                summary.classList.add(\"selected\")\n            }\n        }, this);\n    }\n\n    setSelectedRenderer(rendererIndex) {\n        this.selectedRendererIndex = rendererIndex;\n        this.get('directionsRenderers').forEach((renderer, index) => {\n            if (index === rendererIndex) {\n                this.directionsRoutes[index].setOptions(this.selectedRendererOptions.polylineOptions);\n                this.directionsRoutesBorders[index].setOptions(this.selectedRendererOptions.borderPolylineOptions);\n                if (this.instructionsContainer.offsetParent !== null) {\n                    this.displayRouteSteps(index);\n                }\n            } else {\n                this.directionsRoutes[index].setOptions(this.unselectedRenderersOptions.polylineOptions);\n                this.directionsRoutesBorders[index].setOptions(this.unselectedRenderersOptions.borderPolylineOptions)\n            }\n            renderer.setDirections(renderer.getDirections());\n        }, this);\n        this.selectSummaryRenderer();\n    }\n\n    getFullPath(legs) {\n        const fullPath = [];\n        for (let i = 0; i < legs.length; i++) {\n            const steps = legs[i].steps;\n            for (let j = 0; j < steps.length; j++) {\n                const nextSegment = steps[j].path;\n                for (let k = 0; k < nextSegment.length; k++) {\n                    fullPath.push(nextSegment[k]);\n                }\n            }\n        }\n        return fullPath;\n    }\n\n    registerRoutesClick() {\n        this.directionsRoutes.forEach((route, index) => {\n            woosmap.maps.utils.polylineAddListener(route, 'click', (e) => {\n                this.setSelectedRenderer(index)\n            }, this);\n        });\n        this.directionsRoutesBorders.forEach((border, index) => {\n            woosmap.maps.utils.polylineAddListener(border, 'click', (e) => {\n                this.setSelectedRenderer(index)\n            }, this);\n        });\n    }\n\n    displayAllRoutes() {\n        this.removeAllRoutes();\n        this.currentBounds = new google.maps.LatLngBounds();\n        this.get('directionsRenderers').forEach((renderer, index) => {\n            this.currentBounds.union(renderer.getDirections().routes[0].bounds);\n            const fullPath = this.getFullPath(renderer.getDirections().routes[0].legs);\n            const optionsRoute = {path: fullPath};\n            const optionsRouteBorder = {path: fullPath};\n            if (index === this.selectedRendererIndex) {\n                Object.assign(optionsRoute, this.selectedRendererOptions.polylineOptions);\n                Object.assign(optionsRouteBorder, this.selectedRendererOptions.borderPolylineOptions);\n            } else {\n                Object.assign(optionsRoute, this.unselectedRenderersOptions.polylineOptions);\n                Object.assign(optionsRouteBorder, this.unselectedRenderersOptions.borderPolylineOptions);\n            }\n            const polylineRouteSelected = new google.maps.Polyline(optionsRoute);\n            const polylineRouteBorderSelected = new google.maps.Polyline(optionsRouteBorder);\n            this.directionsRoutes.push(polylineRouteSelected);\n            this.directionsRoutesBorders.push(polylineRouteBorderSelected);\n        }, this);\n        this.directionsRoutes.forEach((route, index) => {\n            route.setMap(this.map);\n        });\n        this.directionsRoutesBorders.forEach((border, index) => {\n            border.setMap(this.map);\n        });\n        this.map.fitBounds(this.currentBounds);\n        this.updateDirectionsMarkers();\n    }\n\n    displayRouteSteps(rendererIndex) {\n        this.get('directionsRenderers').forEach((renderer, index) => {\n            renderer.setPanel(null);\n        });\n        const header = document.querySelector('.directions-trip');\n        if (header) {\n            header.parentNode.removeChild(header);\n        }\n        this.map.fitBounds(this.currentBounds);\n        const dataStepsHeader = Object.assign({}, this.get('origindestinationText'), this.get('directionsSummaries')[rendererIndex], {directionsLink: this.get('directionsLink')})\n        const stepsHeaderSummary = this.stepsHeaderRenderer.render(dataStepsHeader);\n        this.instructionsContainer.insertAdjacentHTML('afterbegin', stepsHeaderSummary);\n        this.instructionsContainer.style.display = \"flex\";\n        this.get('directionsRenderers')[rendererIndex].setPanel(this.stepsContainer);\n        document.querySelector(\".directions-trip-header-back\").addEventListener(\"click\", (e) => {\n            this.instructionsContainer.style.display = \"none\";\n        }, this);\n    }\n\n    cleanRouteSteps() {\n        this.instructionsContainer.style.display = \"none\";\n        this.stepsContainer.querySelectorAll('*').forEach(node => node.remove());\n        this.get('directionsRenderers').forEach((renderer, index) => {\n            renderer.setPanel(null);\n        });\n    }\n\n    cleanSummaryContainer() {\n        this.summaryContainer.querySelectorAll('*').forEach(node => node.remove());\n    }\n\n}\n"]}